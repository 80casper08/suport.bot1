import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from flask import Flask
from threading import Thread

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–Ω–≥—É
app = Flask(__name__)

@app.route("/")
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î ‚úÖ"

@app.route("/ping")
def ping():
    return "OK", 200

def run_flask():
    app.run(host="0.0.0.0", port=8080)

Thread(target=run_flask).start()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_question = State()

menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")],
        [KeyboardButton(text="‚ùì –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")],
        [KeyboardButton(text="üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")],
    ],
    resize_keyboard=True
)

@dp.message(F.command("start"))
async def start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=menu)


@dp.message(F.text == "üìû –ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
async def contact_operator(message: Message):
    await message.answer("–û—á—ñ–∫—É–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∑–∞–±–∞—Ä–æ–º –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è.")
    await bot.send_message(ADMIN_ID, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{message.from_user.username} —Ö–æ—á–µ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—å –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")

@dp.message(F.text == "‚ùì –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
async def faq(message: Message):
    await message.answer("–û—Å—å —á–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n\n1. –Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?\n2. –Ø–∫ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É?\n3. –Ø–∫—ñ —É–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏?")

@dp.message(F.text == "üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def ask_question(message: Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ:")
    await state.set_state(Form.waiting_for_question)

@dp.message(Form.waiting_for_question)
async def receive_question(message: Message, state: FSMContext):
    await bot.send_message(ADMIN_ID, f"üì® –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{message.from_user.username}:\n{message.text}")
    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –ú–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—å.", reply_markup=menu)
    await state.clear()
@dp.message()
async def get_chat_id(message: types.Message):
    await message.answer(f"Chat ID: {message.chat.id}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
